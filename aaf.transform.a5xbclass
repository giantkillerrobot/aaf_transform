'TIP: You can encrypt this file when it is saved, or password protect it, by adding a special comment to the first line of the file (with no leading spaces).
'To encrypt the file, set the comment on the first line to: 'ENCRYPTED
'To password protect the file (which will also encrypt it), set the comment on the first line to: 'PASSWORD:your_password_phrase

define class aaf::transform

'You can specify your own namespace for your classes.
'The namespaces can be any name you want. 
'Namespaces are useful to group similar classes together.
'To dim an object of this class use this syntax: dim pMyinstance as mynamespace::mySampleClass

'TODO:  Add "errorLog".  Trap the errors and put them in a central place in the class
'TODO:  Add "log".  Log every step and put into a class for reading.


	'--
	'-- Old Definitions
	'--
	
	DIM _apikey as C
	
	DIM _formID as C = ""
	DIM _formname as C = ""
	DIM _formversion as C = ""
	DIM _color as C = ""
	DIM _textcolor as C = ""
	DIM _icon as C = ""
	DIM _initialization as C = ""
	DIM _previewdata as C = ""
	DIM _headingtemplate as C = ""
	DIM _listingtemplate as C = ""
	DIM _printingtemplate as C = ""
	DIM _metadata as C = ""
	DIM _settings as C = ""
	DIM _initialstatusID as C = ""
	DIM _statusrolegroupID as C = ""	
	DIM _formDataJSON as C = "{}"
			
	'--
	'-- The following code manages the structure of the form.
	'--
	
	DIM _formDefinition as P
	DIM _formDefinition.pages[0] as P
	

	FUNCTION transform()
		Initialize()
	END FUNCTION
 
	FUNCTION protected Initialize as V()
		'--test = self._formDefinition.pages.size()
		'-- Create Default Page - Will auto generate in the future.
		pageIndex = addPage("root","null","null")
	END FUNCTION
 
	function apikey.get as C ()
        apikey.get = _apikey
    end function 

    function apikey.set as v (value as C )
        _apikey = value
    end function 
                
        
'--
'-- Page Management
'-- The following code are the page structure functions.
'--
          
	function addPage as N(keyValue as C, text as C, color as C)
		pageIndex = self._formDefinition.pages.append()
		self._formDefinition.pages[pageIndex].keyValue = keyValue
		self._formDefinition.pages[pageIndex].color = color
		self._formDefinition.pages[pageIndex].text = text		
		addPage = pageIndex
		
		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "pageStart"
		cmdPointer.text = text

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageIndex].cmdJSONStart = cmdJSON	
		self._formDefinition.pages[pageIndex].cmdJSONEnd = <<%json%
{
      "cmd": "pageEnd"
   }
%json%
			
		'-- Add the controls for the page
		DIM self._formDefinition.pages[pageIndex].controls[0] as P
		
	end function


'--
'-- Add Control Section
'-- The following code with add controls to the page structure.
'--

	function addControlHeading as N(headingText as C,pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
		
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "heading"
		self._formDefinition.pages[pageid].controls[controlIndex].text = headingText
		
		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "heading"
		cmdPointer.type = "group"
		cmdPointer.text = headingText

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
		
		addControlHeading = controlIndex
	
	end function
	
	function addControlInstructions as N(instructionsHTML as C,pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "instructions"
		self._formDefinition.pages[pageid].controls[controlIndex].text = instructionsHTML

		DIM cmdPointer as P
		cmdPointer.cmd = "heading"
		cmdPointer.text = instructionsHTML
		cmdPointer.type = "instructions"
		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
				
		addControlInstructions = controlIndex
	
	end function

'--groupPath as C, text as C, previewValue as C, required as L

	function addControlInteger as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "integer"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "integer"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
					
		addControlInteger = controlIndex
	
	end function

	function addControlStopWatch as N(fieldName as C, fieldLabel as C, previewValue as C, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "stopwatch"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
			
		addControlStopWatch = controlIndex
	
	end function

	function addControlSignature as N(fieldName as C, fieldLabel as C, previewValue as C, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "signature"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
			
		addControlSignature = controlIndex
	
	end function

	function addControlPhone as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "phone"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "phone"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
					
		addControlPhone = controlIndex
	
	end function
				
	function addControlNumber as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "number"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "number"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
				
		addControlNumber = controlIndex
	
	end function
	
	function addControlNumberSigned as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "signed"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "signed"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
					
		addControlNumberSigned = controlIndex
	
	end function

	function addControlScanner as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "scanner"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "scanner"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
					
		addControlScanner = controlIndex
	
	end function

	function addControlLocation as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "scanner"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "location"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
					
		addControlScanner = controlIndex
	
	end function
	
	function addControlCurrency as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "currency"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "currency"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
					
		addControlCurrency = controlIndex
	
	end function
			
	function addControlDate as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "date"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "date"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON	
					
		addControlDate = controlIndex
	
	end function

	function addControlDateTime as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "datetime"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "datetime"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON	
					
		addControlDateTime = controlIndex
	
	end function

	function addControlText as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "text"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "text"

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON	
					
		addControlText = controlIndex
	
	end function

	function addControlYesNo as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, pageKeyValue = "root", id = "")

		DIM delimiterPosition as N

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "buttonlist"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required
      
		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "buttonlist"
		
		'-- Now add the list with Yes/No
	
		DIM listItems[0] as P
		listIndex = listItems.append()
		listItems[listIndex].text = "Yes"
		listItems[listIndex].value = "Y"
		listIndex = listItems.append()
		listItems[listIndex].text = "No"
		listItems[listIndex].value = "N"
		
		cmdPointer.list = listItems
		

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON		
					
		addControlYesNo = controlIndex
	
	end function

	function addControlButtonList as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, listContent as C, pageKeyValue = "root", id = "")

		DIM listItems[0] as P
		
		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "buttonlist"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required
		
		for each item in listContent
			'-- Split the row
			str_crlf = strtran(item.value,"|",crlf())
			delete a
			dim a[0] as C
			a.initialize(str_crlf)	
			listIndex = listItems.append()
			listItems[listIndex].text = a[1]
			listItems[listIndex].value = a[2]			
		next

		'-- Now added the cmd JSON
		DIM cmdPointer as P
		cmdPointer.cmd = "field"
		cmdPointer.groupPath = fieldName
		cmdPointer.text = fieldLabel
		cmdPointer.previewValue = previewValue
		if required then
				cmdPointer.required = "Y"
			else
				cmdPointer.required = "N"
		end if
		cmdPointer.type = "buttonlist"
		
		cmdPointer.list = listItems

		cmdJSON = json_generate(cmdPointer)
		
		self._formDefinition.pages[pageid].controls[controlIndex].cmdJSON = cmdJSON	
				
		addControlButtonList = controlIndex
	
	end function
									

	function addControlList as N(fieldName as C, fieldLabel as C, previewValue as C, required as L, listcontent as C, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "list"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
		self._formDefinition.pages[pageid].controls[controlIndex].required = required
		self._formDefinition.pages[pageid].controls[controlIndex].listcontent = listContent		
			
		addControlList = controlIndex
	
	end function
	
	function addControlPhoto as N(fieldName as C, fieldLabel as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "photo"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].previewValue = previewValue
			
		addControlPhoto = controlIndex
	
	end function

	function addControlPhoto as N(fieldName as C, fieldLabel as C, required as L, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "photo"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldName = fieldName
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
			
		addControlPhoto = controlIndex
	
	end function

	function addControlChangeStatus as N(fieldLabel as C, target as C, pageKeyValue = "root", id = "")

		pageid = _formDefinition.pages.findI(pageKeyValue,"keyValue")

		'-- Make sure that the page exists before adding the control.
		if pageid = 0 then
			error_generate("Page not found")
		end if
		
		controlIndex = self._formDefinition.pages[pageid].controls.append()
		if id = "" then 
			id = api_uuidcreate()
		end if
			
		self._formDefinition.pages[pageid].controls[controlIndex].id  = id
		self._formDefinition.pages[pageid].controls[controlIndex].type = "changeStatus"
		self._formDefinition.pages[pageid].controls[controlIndex].fieldLabel = fieldLabel
		self._formDefinition.pages[pageid].controls[controlIndex].target = target

			
		addControlPhoto = controlIndex
	
	end function
			
'--
'-- The following function processes the page structure and generates the TransForm JSON
'--

	function formDefinitionGenerate as P()

	on error goto error_handler_formDefinitionGenerate

		DIM ret as P
		DIM ret.error as L = .F.
		DIM ret.errorText as C = ""
		DIM ret.result as C
	
				
		DIM formPointer as P
		
		DIM index as N			
	
		'--
		'-- Use a switch command to translate from structure test to other format.
		'--
		
		
		'-- Perform Process Checks
		
		'-- Create new pointer to hold definition
		
		'-- Generate Header Pointer
		
		'-- Process CMDS
		
		DIM cmdsJSON as C = ""
				
		for each page in self._formDefinition.pages
			
			if page.keyValue <> "root" then
				cmdsJSON = cmdsJSON + page.cmdJSONStart + ","
			end if
				
			'-- Don't create page items
			for each control in page.controls
				cmdsJSON = cmdsJSON + control.cmdJSON + ","
			next	

			if page.keyValue <> "root" then
				cmdsJSON = cmdsJSON + page.cmdJSONEnd + ","
			end if
												
		next  '-- For each page
		
		'-- Now convert to JSON
		
		cmdsJSON = rtrim(cmdsJSON,",")
		cmdsJSON = "[" + cmdsJSON + "]"

		ret.result = cmdsJSON
		'--ret.result = json_generate(self._formDefinition)
		
		DIM formDefinitionTemplate as c = <<%json%
{
   "formid": "{{formid}}",
   "formname": "{{formname}}",
   "formversion": "{{formversion}}",
   "color": "{{color}}",
   "textcolor": "{{textcolor}}",
   "icon": "{{icon}}",
   "initialization": "{{initialization}}",
   "previewdata": "{{previewdata}}",
   "headingtemplate": "{{headingtemplate}}",
   "listingtemplate": "{{listingtemplate}}",
   "printingtemplate": "{{printingtemplate}}",
   "metadata": "{{metadata}}",
   "settings": "{{settings}}",
   "initialstatusID": "{{initialstatusID}}",
   "statusrolegroupID": "{{statusrolegroupID}}",
   "formDefinitionJSON": {{cmdsJSON}}
}
%json%
   
   		
   		'-- Merge the class data into the form definition template.
   		
		formDefinition = strtran(formDefinitionTemplate,"{{cmdsJSON}}",cmdsJSON)
		formDefinition = strtran(formDefinition,"{{formid}}",self._formid)
		formDefinition = strtran(formDefinition,"{{formname}}",self._formname)
		formDefinition = strtran(formDefinition,"{{formversion}}",self._formversion)
		formDefinition = strtran(formDefinition,"{{color}}",_color)
		formDefinition = strtran(formDefinition,"{{textcolor}}",self._textcolor)
		formDefinition = strtran(formDefinition,"{{icon}}",self._icon)
		formDefinition = strtran(formDefinition,"{{initialization}}",self._initialization)
		formDefinition = strtran(formDefinition,"{{previewdata}}",self._previewdata)
		formDefinition = strtran(formDefinition,"{{headingtemplate}}",self._headingtemplate)
		formDefinition = strtran(formDefinition,"{{listingtemplate}}",self._listingtemplate)
		formDefinition = strtran(formDefinition,"{{printingtemplate}}",self._printingtemplate)
		formDefinition = strtran(formDefinition,"{{metadata}}",self._metadata)
		formDefinition = strtran(formDefinition,"{{settings}}",self._settings)
		formDefinition = strtran(formDefinition,"{{initialstatusID}}",self._initialstatusID)
		formDefinition = strtran(formDefinition,"{{statusrolegroupID}}",self._statusrolegroupID)
		
		ret.result = formDefinition
								
		formDefinitionGenerate = ret

		end
		
		error_handler_formDefinitionGenerate:
		
		    err = error_code_get()
		    msg = error_text_get(err)
		 	script = error_script_get()
		 	lineNumber = error_line_number_get()
		 	
		 	ret.error = .T.
		 	ret.errorText = "Error: " + script + ":" + lineNumber + ": " + msg
		 	trace.WriteLn("Error: " + script + ":" + lineNumber + ": " + msg)
		 	
			formDefinitionGenerate = ret		 	
		 			
	end function
	

	'--
	'-- OLD CODE
	'--
	
	'-- The focus of this code will be to generate the transform json
	'-- It will also do other utility functions
	'--

	FUNCTION generateFormJSON as P()
	
	'-- This is a placeholder for future functions.
	'-- Makes it easy to copy/paste/update to add new functionality.
	
	on error goto error_handler_generateFormJSON
	
		DIM ret as P
		DIM ret.error as L
		DIM ret.errorText as C
		DIM ret.result as C  
		
		 
		
		DIM formPointer as P
		
		formPointer.formid = self._formid
		formPointer.formname = self._formname
		formPointer.formversion = self._formversion
		formPointer.color = self._color
		formPointer.textcolor = self._textcolor
		formPointer.icon = self._icon
		formPointer.initialization = self._initialization
		formPointer.previewdata = self._previewdata
		formPointer.headingtemplate = self._headingtemplate
		formPointer.listingtemplate = self._listingtemplate
		formPointer.printingtemplate = self._printingtemplate
		formPointer.settings = self._settings
		formPointer.cmds = json_generate(self._cmdsPointerArray,.t.)


		outputJSON = json_generate(formPointer)
		
		'--outputJSON = strtran(outputJSON,"\n","")
		'--outputJSON = strtran(outputJSON,"\t","")

		DIM formDefinitionPointer as P
		formDefinitionPointer.formId = self._formid '--"FLPOC11"
		formDefinitionPointer.formname = self._formname '-- "FLPOC11"
		formDefinitionPointer.formDefinitionJSON = outputJSON

		postdata = json_generate(formDefinitionPointer)
		'--postdata = strtran(postdata,"\n","")
		'--postdata = strtran(postdata,"\t","")
		
		ret.result = postdata
		
		generateFormJSON = ret
	
	end
	
	error_handler_generateFormJSON:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	    ret.error = .T.
	    ret.errorText = msg
		
		generateFormJSON = ret   
	
		
	END FUNCTION

	
	FUNCTION formDefinitionInsert as P(deleteExistingDefination = .T.)
	
	'-- This is a placeholder for future functions.
	'-- Makes it easy to copy/paste/update to add new functionality.
	
	on error goto error_handler_formDefinitionInsert
	
		DIM ret as P
		DIM ret.error as L
		DIM ret.errorText as C
		DIM ret.result as C   
		
		DIM callResult as P
		DIM callResult.error as L
		DIM callResult.errorText as C
		DIM callResult.result as C   
		
		callResult = self.formDefinitionGenerate()
		formDefinition = callResult.result
	
		if callResult.Error then
				error_generate(callResult.errorText)
			else
				'-- Delete if necessary
				if deleteExistingDefination then
					callResult = formDefinitionDelete()
				end if
			
				'-- Insert your code here.
				dim url as c = "/CreateNewFormDefinition"
				dim pr as p
				pr = a5dialogHelper_transformAPIQuery(url,formDefinition,self._apikey)
				if pr.error = .f. then
					dim result as c 
					result = pr.result
					'--showvar(result)
				else
					dim errorText as c 
					error_generate(pr.errorText)
				end if 			
			
		end if

		
		ret.result = "Success"
		
		formDefinitionInsert = ret
	
	end
	
	error_handler_formDefinitionInsert:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	    ret.error = .T.
	    ret.errorText = msg
		
		formDefinitionInsert = ret   
	
		
	END FUNCTION	

	FUNCTION createFormInstance as P(username as C)
	
	'-- This is a placeholder for future functions.
	'-- Makes it easy to copy/paste/update to add new functionality.
	
	on error goto error_handler_createFormInstance
	
		DIM ret as P
		DIM ret.error as L
		DIM ret.errorText as C
		DIM ret.result as C   

		dim formInstancePointer as P
		formInstancePointer.formId = self._formId '--"FLPOC11"
		formInstancePointer.formDataJSON = self._formDataJSON '--"{}"
		formInstancePointer.person = username '--"dion@alphasoftware.com"
		
		postdata = json_generate(formInstancePointer)
		
		dim url as c = "/CreateNewFormInstance"
		dim pr as p
		pr = a5dialogHelper_transformAPIQuery(url,postdata,self._apikey)
		if pr.error = .f. then
			
			dim result as c 
			'--showvar(result)
			'-- Now grab the form instance id
			DIM formInsertResult as P
			formInsertResult = json_parse(pr.result)

			'-- Return the new unique id for the form instance.
			ret.result = formInsertResult.result.forminstanceid
			
		else
			dim errorText as c 
			errorText = pr.errorText
			error_generate(errorText) '--showvar(errorText)
		end if 
		
		createFormInstance = ret
	
	end
	
	error_handler_createFormInstance:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	    ret.error = .T.
	    ret.errorText = msg
		
		createFormInstance = ret   
	
		
	END FUNCTION
			


	FUNCTION getFormInstanceData as P(formInstanceID as C)
	
	'-- This is a placeholder for future functions.
	'-- Makes it easy to copy/paste/update to add new functionality.
	
	on error goto error_handler_getFormInstanceData
	

		DIM ret as P
		DIM ret.error as L
		DIM ret.errorText as C
		DIM ret.result as C   
		
		DIM transformResult as P
		
		dim postdata as c 
		dim url as c = "/GetFormDataForFormInstanceId/" + formInstanceID + "?mode=Detailed&resolveMediaFields=true&injectFormMetaDataIntoData=true"
		dim pr as p
		pr = a5dialogHelper_transformAPIQuery(url,postdata,self._apikey)
		if pr.error = .t. then
			error_generate(pr.errorText)
		end if 
	
		
		transformResult = json_parse(pr.result) 
		ret.result = json_generate(transformResult.result[1].formdata)
		
		getFormInstanceData = ret
	
	end
	
	error_handler_getFormInstanceData:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	    ret.error = .T.
	    ret.errorText = msg
		
		getFormInstanceData = ret   
	
		
	END FUNCTION

	FUNCTION getFormInstanceDataJSON as C(formInstanceID as C)
	
	'-- This is a placeholder for future functions.
	'-- Makes it easy to copy/paste/update to add new functionality.
	
	on error goto error_handler_getFormInstanceDataJSON
	

		DIM ret as P
		DIM ret.error as L
		DIM ret.errorText as C
		DIM ret.result as C   
		
		DIM transformResult as P
	
			'-- Get the api key
		self._apikey = a5w_getfromwebapprepository("transformAPIKey")
		

		dim apikey as c = self._apikey
			
		dim postdata as c 
		dim url as c = "/GetFormDataForFormInstanceId/" + formInstanceID + "?mode=Detailed&resolveMediaFields=false&injectFormMetaDataIntoData=false&returnMediaFileList=false&getFormDefinition=false"

		'--dim url as c = "/GetFormDataForFormInstanceId/" + formInstanceID + "?mode=Detailed&resolveMediaFields=true&injectFormMetaDataIntoData=true"
		dim pr as p
		pr = a5dialogHelper_transformAPIQuery(url,postdata,self._apikey)
		if pr.error = .t. then
			error_generate(pr.errorText)
		end if 
		
		transformResult = json_parse(pr.result) 
		'ret.result = json_generate(transformResult.result[1].formdata)
		
		getFormInstanceDataJSON = json_generate(transformResult.result[1].formdata)
	
	end
	
	error_handler_getFormInstanceDataJSON:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	    ret.error = .T.
	    ret.errorText = msg
		
		getFormInstanceDataJSON = ret   
	
		
	END FUNCTION
	
	function formDefinitionGet as c ()
			
		'-- Get the api key
		self._apikey = a5w_getfromwebapprepository("transformAPIKey")
		
		dim apikey as c = self._apikey '--"70c1f472d3b842839d205a920e3cec1a_ALL"	
		dim postdata as c 
		dim url as c = "/GetFormDefinitionForFormId/" + self._formID
		dim pr as p
		pr = a5dialogHelper_transformAPIQuery(url,postdata,apikey)
		if pr.error = .f. then
			debug(1)
			dim result as c 
			result = pr.result
			
			DIM resultPointer as P
			resultPointer = json_parse(result)
			output = json_generate(resultpointer.result)
			
		else
			dim errorText as c 
			errorText = pr.errorText
		end if 
	
		
	
		formDefinitionGet = output
						


	end function 


	FUNCTION formDefinitionPreFlight as P()
	
	'--
	'-- This function will perform the pre-flight check of the form definition before processing
	'--
	
	on error goto error_handler_formDefinitionPreFlight
	
		DIM ret as P
		DIM ret.error as L
		DIM ret.errorText as C
		DIM ret.result as C = ""   
	
		'-- Start pre-flight log 
		ret.result = ret.result + "Pre-flight review starting..." + crlf()
		
		'-- 
		'-- Check for required items
		'--
		if self._formid <> "" then
				ret.result = ret.result + "formid ok" + crlf()			
			else
				ret.result = ret.result + "formid error" + crlf()	
				ret.error = .T.
		end if

		if self._formname <> "" then
				ret.result = ret.result + "formname ok" + crlf()			
			else
				ret.result = ret.result + "formname error" + crlf()	
				ret.error = .T.
		end if		
		
		if self._formversion <> "" then
				ret.result = ret.result + "formversion ok" + crlf()			
			else
				ret.result = ret.result + "formversion error" + crlf()	
				ret.error = .T.
		end if		

		if self._color <> "" then
				ret.result = ret.result + "formversion ok" + crlf()			
			else
				ret.result = ret.result + "formversion warning" + crlf()	
		end if		

		if self._textcolor <> "" then
				ret.result = ret.result + "textcolor ok" + crlf()			
			else
				ret.result = ret.result + "textcolor warning" + crlf()	
		end if							

		if self._icon <> "" then
				ret.result = ret.result + "icon ok" + crlf()			
			else
				ret.result = ret.result + "icon warning" + crlf()	
		end if	

		if self._initialization <> "" then
				ret.result = ret.result + "initialization ok" + crlf()			
			else
				ret.result = ret.result + "initialization warning" + crlf()	
		end if	
				
		if self._previewdata <> "" then
				ret.result = ret.result + "previewdata ok" + crlf()			
			else
				ret.result = ret.result + "previewdata warning"	+ crlf()
		end if	

		if self._headingtemplate <> "" then
				ret.result = ret.result + "headingtemplate ok" + crlf()			
			else
				ret.result = ret.result + "headingtemplate warning" + crlf()	
		end if	

		if self._listingtemplate <> "" then
				ret.result = ret.result + "listingtemplate ok" + crlf()			
			else
				ret.result = ret.result + "listingtemplate warning" + crlf()	
		end if	

		if self._printingtemplate <> "" then
				ret.result = ret.result + "printingtemplate ok" + crlf()			
			else
				ret.result = ret.result + "printingtemplate warning" + crlf()	
		end if	

		if self._settings <> "" then
				ret.result = ret.result + "settings ok"	+ crlf()		
			else
				ret.result = ret.result + "settings warning" + crlf()	
		end if	
						
		ret.result = ret.result + "Pre-flight complete"	
		
		if ret.error then
			error_generate("Pre-flight error.  Please check results")
		end if
		
		
		formDefinitionPreFlight = ret
	
	end
	
	error_handler_formDefinitionPreFlight:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	    ret.error = .T.
	    ret.errorText = msg
		
		formDefinitionPreFlight = ret   
	
		
	END FUNCTION

'--
'-- The following functions are utility functions for interacting with a TransForm account.
'--

	function getFormInstances as P(formID as C)
				
	on error goto error_handler_getFormInstances

	DIM ret as P
	DIM ret.error as L = .F.
	DIM ret.errorText as C = ""
	DIM ret.result as P
	
	DIM transformResult as P 
	
	if self._apikey = "" then
		error_generate("TransForm API Key Not Set")	
	end if
	
	dim apikey as c = self._apikey
	dim postdata as c 
	dim url as c = "/GetFormInstancesArrayForFormId/" + formID + "?paginated=false&pageSize=10&pageNumber=1&mode=Detailed&resolveMediaFields=true&getRecordCount=false"
	dim pr as p
	pr = a5dialogHelper_transformAPIQuery(url,postdata,apikey)
	if pr.error = .f. then
		dim result as c 
		result = pr.result
	else
		dim errorText as c 
		errorText = pr.errorText
	end if 
	

	transformResult = json_parse(result) 
	ret.result = transformResult.result				


	getFormInstances = ret


	end
	
	error_handler_getFormInstances:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	 	script = error_script_get()
	 	lineNumber = error_line_number_get()
	 	 
	 	ret.error = .T.
	 	
	   ret.errorText = "alert('" + js_escape("Error: " + script + ":" + lineNumber + ": " + msg) + "');"
	    '--showvar("Error: " + script + ":" + lineNumber + ": " + msg)
	    
	    getFormInstancesJSON = ret
	end function
	
		
	function formDefinitionGetDropDown as c ()
		
		DIM definitionPointer as P
		DIM output as C = ""
				
		'-- Get the api key
		self._apikey = a5w_getfromwebapprepository("transformAPIKey")
		

		
		'--dim apikey as c = "70c1f472d3b842839d205a920e3cec1a_ALL"
		dim postdata as c 
		dim url as c = "/GetListOfFormDefinitionsForAccount"
		dim pr as p

		pr = a5dialogHelper_transformAPIQuery(url,postdata,self._apikey)
		if pr.error = .f. then
			dim result as c 
			result = pr.result

			definitionPointer = json_parse(result)
			
			for each item in definitionPointer.result
				output = output + item.formname + "|" + item.formid + crlf()
			next
			
			formDefinitionGetDropDown = output
		else
			dim errorText as c 
			errorText = pr.errorText
		end if 


	end function 
	
		function formInstanceListBuilder as c (formFields = "")
		
		DIM instancePointer as P
		DIM output as C
		DIM outputPointerArray[0] as P
		
		DIM loadFieldExpression as C = <<%str%
outputPointerArray[index].{{columnName}} = item.formdata.{{columnName}}
%str%
	
				
		'-- Get the api key
		self._apikey = a5w_getfromwebapprepository("transformAPIKey")
		

		
		dim apikey as c = self._apikey '--"70c1f472d3b842839d205a920e3cec1a_ALL"
		dim postdata as c 
		dim url as c = "/GetFormInstancesArrayForFormId/" + self._formID + "?paginated=false&pageSize=10&pageNumber=1&mode=Detailed&resolveMediaFields=true&getRecordCount=false&returnMediaFileList=false&getFormDefinition=false"
		dim pr as p
		pr = a5dialogHelper_transformAPIQuery(url,postdata,apikey)
		if pr.error = .f. then
			dim result as c 
			result = pr.result

			instancePointer = json_parse(result)

			for each item in instancePointer.result
				index = outputPointerArray.append()
				outputPointerArray[index].forminstanceid = item.forminstanceid
				for each fieldItem in comma_to_crlf(formFields)
					executeExpression = stritran(loadFieldExpression,"{{columnName}}",fieldItem.value)
					evaluate_template(executeExpression)
				next
				
			next
			

		formInstanceListBuilder = json_generate(outputPointerArray)	
						
		else
			dim errorText as c 
			errorText = pr.errorText
		end if 


	end function 

	
	FUNCTION formDefinitionDelete as P()
	
	'-- This is a placeholder for future functions.
	'-- Makes it easy to copy/paste/update to add new functionality.
	
	on error goto error_handler_formDefinitionDelete
	
		DIM ret as P
		DIM ret.error as L
		DIM ret.errorText as C
		DIM ret.result as C   

		dim postdata as c 
		dim url as c = "/DeleteFormDefinition/" + self._formID
		dim pr as p
		pr = a5dialogHelper_transformAPIQuery(url,postdata,self._apikey)
		if pr.error = .t. then
			error_generate(pr.errorText)
		end if 
	
		ret.result = "Success"
		
		formDefinitionDelete = ret
	
	end
	
	error_handler_formDefinitionDelete:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	    ret.error = .T.
	    ret.errorText = msg
		
		formDefinitionDelete = ret   
	
		
	END FUNCTION
	


	FUNCTION formDefinitionAndInstancesDelete as P()
	
	'-- This is a placeholder for future functions.
	'-- Makes it easy to copy/paste/update to add new functionality.
	
	on error goto error_handler_formDefinitionAndInstancesDelete
	

		DIM ret as P
		DIM ret.error as L
		DIM ret.errorText as C
		DIM ret.result as C   
		
		DIM callResult as P
		DIM callResult.error as L
		DIM callResult.errorText as C
		DIM callResult.result as C   

		DIM formInstancePointerArray[0] as P
		DIM formInstancePointer as P
		
		'-- First, get a list of instances
		callResult = self.getFormInstances()
		if callResult.error then
			error_generate("Error getting form instances")
		end if

		formInstancePointerArray = callResult.result
		
		for each formInstancePointer in callResult.result

				dim postdata as c 
				dim url as c = "/DeleteFormInstance/" + formInstancePointer.forminstanceid
				dim pr as p
				pr = a5dialogHelper_transformAPIQuery(url,postdata,self._apikey)
				if pr.error = .t. then
					error_generate("Form instance delete error." + pr.errorText) 
				end if 
		next
		

		dim postdata as c 
		dim url as c = "/DeleteFormDefinition/" + self._formID
		dim pr as p
		pr = a5dialogHelper_transformAPIQuery(url,postdata,self._apikey)
		if pr.error = .t. then
			error_generate(pr.errorText)
		end if 
	
		ret.result = "Success"
		
		formDefinitionAndInstancesDelete = ret
	
	end
	
	error_handler_formDefinitionAndInstancesDelete:
	
	    err = error_code_get()
	    msg = error_text_get(err)
	    ret.error = .T.
	    ret.errorText = msg
		
		formDefinitionAndInstancesDelete = ret   
	
		
	END FUNCTION
			
end class       	


